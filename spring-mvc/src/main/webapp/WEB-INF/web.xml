<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--学习前置条件-->
    <!--1. web.xml 中的 servlet、filter、listener、context-param 加载顺序-->
    <!--2. load-on-startup 标签的作用， 影响Servlet对象的创建时机，注意Servlet只会被初始化一次-->
    <!--3. url-pattern 作用， 4种配置方式，(1)/XXX 精确匹配 (2)/* 路径匹配(3)*.do 扩展名匹配 (4)/ 匹配任意的url-->

    <!--注意一点，不要用/*， Tomcat内也有web.xml配置，包含*.jsp、*.jspx  和  / 两种，web应用中如果配置/*那么优先级高于Tomcat内置，则发生短路不做处理，会报异常-->


    <!-- url-pattern 博客 https://www.cnblogs.com/51kata/p/5152400.html-->
    <!-- 配置前端控制器 DispatcherServlet SpringMVC的核心类-->
    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--设置Spring配置文件路径-->
        <!--如果不配置contextConfigLocation初始化参数，DispatcherServlet读取默认路径下的配置-->
        <!--默认文件路径: /WEB-INF/springmvc-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--指定初始化时机， 设置为2，Tomcat启动时，DispatcherServlet初始化-->
        <!--load-on-startup 元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。-->
        <!--它的值必须是一个整数，表示servlet被加载的先后顺序。-->
        <!--如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。-->
        <!--如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载。-->
        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>